import { CognitoUser } from '@aws-amplify/auth';
import { PersistentModel, PersistentModelConstructor, ModelInit, ProducerModelPredicate } from '@aws-amplify/datastore';
import { a as DataStoreCollectionProps, c as DataStoreCollectionResult, D as DataStoreItemProps, b as DataStoreItemResult, d as DataStoreBindingProps, e as DataStorePredicateObject } from './datastore-d2cb91cb';
import { S3ProviderGetConfig } from '@aws-amplify/storage';
import { SignOutOpts } from '@aws-amplify/auth/lib-esm/types/Auth';
import * as React from 'react';

interface AuthUser extends CognitoUser {
    username: string;
    attributes: Record<string, string>;
}
interface UseAuthResult {
    user?: AuthUser;
    isLoading: boolean;
    error?: Error;
    fetch?: () => void;
}
/**
 * Amplify Auth React hook
 * @internal
 */
declare const useAuth: () => UseAuthResult;

/**
 * Perform a collection query against a DataStore model
 * @internal
 */
declare const useDataStoreCollection: <M extends Readonly<{
    id: string;
} & Record<string, any>>>({ model, criteria, pagination, }: DataStoreCollectionProps<M>) => DataStoreCollectionResult<M>;
/**
 * Perform a single record query against a DataStore model
 * @internal
 */
declare const useDataStoreItem: <M extends Readonly<{
    id: string;
} & Record<string, any>>>({ model, id, }: DataStoreItemProps<M>) => DataStoreItemResult<M>;
/**
 * Perform a query against a DataStore model
 * @internal
 */
declare function useDataStoreBinding<Model extends PersistentModel>(props: DataStoreBindingProps<Model, 'record'>): DataStoreItemResult<Model>;
declare function useDataStoreBinding<Model extends PersistentModel>(props: DataStoreBindingProps<Model, 'collection'>): DataStoreCollectionResult<Model>;

interface UseStorageURLResult {
    url?: string;
    error?: Error;
    isLoading: boolean;
}
/**
 * Computes a public URL for an Amplify Storage file
 * @internal
 */
declare const useStorageURL: (key: string, options?: S3ProviderGetConfig) => {
    fetch: () => () => void;
    url?: string;
    error?: Error;
    isLoading: boolean;
};

interface UseAuthSignOutAction {
    (options?: SignOutOpts): () => Promise<void>;
}
/**
 * Action to Signout of Authenticated session
 * @internal
 */
declare const useAuthSignOutAction: UseAuthSignOutAction;

declare type NavigateType = 'url' | 'anchor' | 'reload';
interface UseNavigateActionOptions {
    type: NavigateType;
    url?: string;
    anchor?: string;
    target?: React.HTMLAttributeAnchorTarget;
}
/**
 * Action to instruct userâ€™s browser to change current location
 * @internal
 */
declare const useNavigateAction: (options: UseNavigateActionOptions) => () => void;

declare type UseStateMutationAction<StateType> = [
    StateType,
    (newState: StateType) => void
];
/**
 * Action to wrap React.useState with Hub events
 * @internal
 */
declare const useStateMutationAction: <StateType>(initialState: StateType) => UseStateMutationAction<StateType>;

interface UseDataStoreCreateActionOptions<Model extends PersistentModel> {
    model: PersistentModelConstructor<Model>;
    fields: ModelInit<Model, {
        readOnlyFields: 'createdAt' | 'updatedAt';
    }>;
}
/**
 * Action to Create DataStore item
 * @internal
 */
declare const useDataStoreCreateAction: <Model extends Readonly<{
    id: string;
} & Record<string, any>>>({ model, fields, }: UseDataStoreCreateActionOptions<Model>) => () => Promise<void>;

interface UseDataStoreDeleteActionOptions<Model extends PersistentModel> {
    model: PersistentModelConstructor<Model>;
    id: string;
}
/**
 * Action to Delete DataStore item
 * @internal
 */
declare const useDataStoreDeleteAction: <Model extends Readonly<{
    id: string;
} & Record<string, any>>>({ model, id, }: UseDataStoreDeleteActionOptions<Model>) => () => Promise<void>;

interface UseDataStoreUpdateActionOptions<Model extends PersistentModel> {
    model: PersistentModelConstructor<Model>;
    id: string;
    fields: ModelInit<Model, {
        readOnlyFields: 'createdAt' | 'updatedAt';
    }>;
}
/**
 * Action to Update DataStore item
 * @internal
 */
declare const useDataStoreUpdateAction: <Model extends Readonly<{
    id: string;
} & Record<string, any>>>({ model, id, fields, }: UseDataStoreUpdateActionOptions<Model>) => () => Promise<void>;

/**
 * Creates a DataStore compatible predicate function from an object representation
 * @internal
 */
declare const createDataStorePredicate: <Model extends Readonly<{
    id: string;
} & Record<string, any>>>(predicateObject: DataStorePredicateObject) => ProducerModelPredicate<Model>;

/**
 * This method is used to parse through all of the overrides and
 * only pass the relevant child overrides for a given component.
 * @internal
 * @param overrides escape hatch props
 * @param elementHierarchy
 * @returns overrides only for specified element
 */
declare const findChildOverrides: (overrides: EscapeHatchProps | null | undefined, elementHierarchy: string) => any;
/**
 * This helper method is used to get the overrides
 * that will be applied to a component
 * @internal
 * @param overrides escape hatch props
 * @param elementHierarchy
 * @returns component overrides
 */
declare const getOverrideProps: (overrides: EscapeHatchProps | null | undefined, elementHierarchy: string) => {
    [k: string]: string;
};
declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, string>;
};
declare type VariantValues = {
    [key: string]: string;
};
declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
/**
 * Given a list of style variants, select a given one based on input props
 * @internal
 * @param variants list of style variants to select from
 * @param props variant values to select from the list, may include additional props, to tidy up usage upstream
 */
declare function getOverridesFromVariants(variants: Variant[], props: {
    [key: string]: any;
}): {};
/**
 * This helper method is used to merge
 * variants with overrides
 * @internal
 * @param variants
 * @param overrides
 * @returns merged variants with overrides
 */
declare const mergeVariantsAndOverrides: (variants: EscapeHatchProps, overrides: EscapeHatchProps) => EscapeHatchProps;

export { EscapeHatchProps, UseAuthResult, UseAuthSignOutAction, UseDataStoreCreateActionOptions, UseDataStoreDeleteActionOptions, UseDataStoreUpdateActionOptions, UseNavigateActionOptions, UseStorageURLResult, Variant, createDataStorePredicate, findChildOverrides, getOverrideProps, getOverridesFromVariants, mergeVariantsAndOverrides, useAuth, useAuthSignOutAction, useDataStoreBinding, useDataStoreCollection, useDataStoreCreateAction, useDataStoreDeleteAction, useDataStoreItem, useDataStoreUpdateAction, useNavigateAction, useStateMutationAction, useStorageURL };
